// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sword {
    id        String   @id @default(cuid())
    shiny     Boolean
    rarity    String
    quality   String
    material  String
    aura      String?
    value     BigInt
    damage    BigInt
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ownerId   String
    owner     User     @relation(fields: [ownerId], references: [id])
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    experience      BigInt    @default(100)
    luck            BigInt    @default(1)
    money           BigInt    @default(50)
    vip             Boolean   @default(false)
    vipUntil        DateTime?
    lastAscend      DateTime?
    lastLuckUpgrade DateTime?
    lastGeneration  DateTime?
    swordId         String?
    accounts        Account[]
    sessions        Session[]
    swords          Sword[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
